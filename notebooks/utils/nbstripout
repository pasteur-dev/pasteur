#!/usr/bin/env python3
"""strip outputs from an IPython Notebook
Opens a notebook, strips run metadata, and writes the outputless version to the
original file.

Sensitive cells are marked by the `# sensitive` comment.

Useful when working with confidential data, but still want to publish notebooks
with part of the outputs. To be used as a git filter or pre-commit. 
This does mostly the same thing as the `Clear All Output` command in the notebook UI.

nbformat and python are the only dependencies
$ pip install nbformat
"""

from copy import deepcopy
import re
import sys
import argparse

py2 = True

if sys.version_info > (3, 0):
    py2 = False

try:
    # Jupyter >= 4
    from nbformat import read, write, NO_CONVERT
except ImportError:
    # IPython 3
    try:
        from IPython.nbformat import read, write, NO_CONVERT
    except ImportError:
        # IPython < 3
        from IPython.nbformat import current

        def read(f, as_version):
            return current.read(f, "json")

        def write(nb, f):
            return current.write(nb, f, "json")


def _cells(nb):
    """Yield all cells in an nbformat-insensitive manner"""
    if nb.nbformat < 4:
        for ws in nb.worksheets:
            for cell in ws.cells:
                yield cell
    else:
        for cell in nb.cells:
            yield cell


def strip_output(nb):
    """strip the outputs from a notebook object"""
    nb.metadata.pop("signature", None)
    for cell in _cells(nb):
        if "metadata" in cell and "ExecuteTime" in cell["metadata"]:
            cell["metadata"]["ExecuteTime"] = {}

        # Hide execution number
        if "execution_count" in cell:
            cell["execution_count"] = None

        if "outputs" in cell:
            if "source" in cell and re.search("(--|#) ?[Ss]ensitive", cell["source"]):
                # Remove sensitive outputs (which contain comment)
                cell["outputs"] = []
            else:
                # Handle Nonsensitive outputs
                new_outs = []
                for out in cell["outputs"]:
                    new_out = deepcopy(out)
                    if "text" in out:
                        # Remove timestamps in logs to allow versioning
                        text = out["text"]

                        # Replace logging date with sample one
                        text = re.sub(
                            "\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}.\d{3}",
                            "2000-01-01 00:00:00,000",
                            text,
                        )

                        # Replace rich logging time with blank space
                        text = re.sub(
                            "\[\d\d:\d\d:\d\d\]",
                            "          ",
                            text,
                        )

                        # Replace tqdm times with reference one
                        text = re.sub(
                            "\d\d:\d\d<\d\d:\d\d,  \d+\.\d\d(?:s\/it|it\/s)",
                            "00:00<00:00,  1.00it/s",
                            text,
                        )

                        new_out["text"] = text

                    if "data" in out:
                        data = out["data"]
                        new_data = new_out["data"]
                        if "text/plain" in data:
                            plain = data["text/plain"]

                            # Remove pandas styler id
                            plain = re.sub(
                                "<pandas\.io\.formats\.style\.Styler at 0x.{12}>",
                                "<pandas.io.formats.style.Styler at 0x000000000000>",
                                plain,
                            )

                            new_data["text/plain"] = plain

                        if "text/html" in data:
                            html = data["text/html"]

                            # Remove pandas table ids
                            html = re.sub(
                                'T_.{5}(?=_|")',
                                "T_00000",
                                html,
                            )

                            new_data["text/html"] = html

                    # Hide execution number
                    if "execution_count" in out:
                        new_out["execution_count"] = None

                    new_outs.append(new_out)
                cell["outputs"] = new_outs

    # Remove interpreter hash and kernelspec (contains info about kernel used)
    if "metadata" in nb:
        metadata = nb["metadata"]
        metadata.pop("interpreter", None)
        metadata.pop("kernelspec", None)

    return nb


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "infile", nargs="?", type=argparse.FileType("r"), default=sys.stdin
    )
    parser.add_argument(
        "outfile", nargs="?", type=argparse.FileType("w"), default=sys.stdout
    )

    args = parser.parse_args()

    nb = read(args.infile, as_version=NO_CONVERT)
    nb = strip_output(nb)
    write(nb, args.outfile)
